using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/********************************************************************************/
/* Steadsoft.Spitfire v1.0.0.0                                                  */
/* Warning DO NOT MODIFY this struct by editing.                                */
/* This code was generated by a software tool.                                  */
/********************************************************************************/

namespace Steadsoft.Spitfire.STM32MP153.Peripherals
{
    public partial class Dac
    {
        public ref Registers.CR CR => ref GetAsRegister<Registers.CR>(0x0000);
        public ref Registers.DHR12R1 DHR12R1 => ref GetAsRegister<Registers.DHR12R1>(0x0008);
        public ref Registers.DHR8R1 DHR8R1 => ref GetAsRegister<Registers.DHR8R1>(0x0010);

        public static class Registers
        {
            public struct CR : IRegister
            {
                private uint allBits;

                private CR(uint Initial)
                {
                    allBits = Initial;
                }

                public uint AllBits { get => allBits & 0x7FFFFFFFU; set => allBits = value & 0x7FFFFFFFU; }

                public bool EN1
                {
                    get => Convert.ToBoolean ((this  & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFFFFEU) | ((Convert.ToUInt32(value) & 0x00000001U));
                }

                public bool TEN1
                {
                    get => Convert.ToBoolean ((this  >> 1 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFFFFDU) | ((Convert.ToUInt32(value) & 0x00000001U) << 1);
                }

                public TSELMode TSEL1
                {
                    get => (TSELMode) ((this  >> 2 & 0x0000000FU)) ;
                    set => AllBits = (this & 0xFFFFFFC3U) | ((Convert.ToUInt32(value) & 0x0000000FU) << 2);
                }

                public WMode WAVE1
                {
                    get => (WMode) ((this  >> 6 & 0x00000003U)) ;
                    set => AllBits = (this & 0xFFFFFF3FU) | ((Convert.ToUInt32(value) & 0x00000003U) << 6);
                }

                public MAMPMode MAMP1
                {
                    get => (MAMPMode) ((this  >> 8 & 0x0000000FU)) ;
                    set => AllBits = (this & 0xFFFFF0FFU) | ((Convert.ToUInt32(value) & 0x0000000FU) << 8);
                }

                public bool DMAEN1
                {
                    get => Convert.ToBoolean ((this  >> 12 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFEFFFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 12);
                }

                public bool DMAUDRIE1
                {
                    get => Convert.ToBoolean ((this  >> 13 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFDFFFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 13);
                }

                public bool CEN1
                {
                    get => Convert.ToBoolean ((this  >> 14 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFBFFFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 14);
                }

                public bool HFSEL
                {
                    get => Convert.ToBoolean ((this  >> 15 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFF7FFFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 15);
                }

                public bool EN2
                {
                    get => Convert.ToBoolean ((this  >> 16 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFEFFFFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 16);
                }

                public bool TEN2
                {
                    get => Convert.ToBoolean ((this  >> 17 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFDFFFFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 17);
                }

                public TSELMode TSEL2
                {
                    get => (TSELMode) ((this  >> 18 & 0x0000000FU)) ;
                    set => AllBits = (this & 0xFFC3FFFFU) | ((Convert.ToUInt32(value) & 0x0000000FU) << 18);
                }

                public WMode WAVE2
                {
                    get => (WMode) ((this  >> 22 & 0x00000003U)) ;
                    set => AllBits = (this & 0xFF3FFFFFU) | ((Convert.ToUInt32(value) & 0x00000003U) << 22);
                }

                public MAMPMode MAMP2
                {
                    get => (MAMPMode) ((this  >> 24 & 0x0000000FU)) ;
                    set => AllBits = (this & 0xF0FFFFFFU) | ((Convert.ToUInt32(value) & 0x0000000FU) << 24);
                }

                public bool DMAEN2
                {
                    get => Convert.ToBoolean ((this  >> 28 & 0x00000001U)) ;
                    set => AllBits = (this & 0xEFFFFFFFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 28);
                }

                public bool DMAUDRIE2
                {
                    get => Convert.ToBoolean ((this  >> 29 & 0x00000001U)) ;
                    set => AllBits = (this & 0xDFFFFFFFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 29);
                }

                public bool CEN2
                {
                    get => Convert.ToBoolean ((this  >> 30 & 0x00000001U)) ;
                    set => AllBits = (this & 0xBFFFFFFFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 30);
                }


                public static implicit operator uint (CR R) => R.allBits;
                public static implicit operator CR(uint R) => new CR(R);
            }

            public struct DHR12R1 : IRegister
            {
                private uint allBits;

                private DHR12R1(uint Initial)
                {
                    allBits = Initial;
                }

                public uint AllBits { get => allBits & 0x00000FFFU; set => allBits = value & 0x00000FFFU; }

                public uint DACC1DHR
                {
                    get => (uint) ((this  & 0x00000FFFU)) ;
                    set => AllBits = (this & 0xFFFFF000U) | ((Convert.ToUInt32(value) & 0x00000FFFU));
                }


                public static implicit operator uint (DHR12R1 R) => R.allBits;
                public static implicit operator DHR12R1(uint R) => new DHR12R1(R);
            }

            public struct DHR8R1 : IRegister
            {
                private uint allBits;

                private DHR8R1(uint Initial)
                {
                    allBits = Initial;
                }

                public uint AllBits { get => allBits & 0x000000FFU; set => allBits = value & 0x000000FFU; }

                public uint DACC1DHR
                {
                    get => (uint) ((this  & 0x000000FFU)) ;
                    set => AllBits = (this & 0xFFFFFF00U) | ((Convert.ToUInt32(value) & 0x000000FFU));
                }


                public static implicit operator uint (DHR8R1 R) => R.allBits;
                public static implicit operator DHR8R1(uint R) => new DHR8R1(R);
            }

            }
    }
}
