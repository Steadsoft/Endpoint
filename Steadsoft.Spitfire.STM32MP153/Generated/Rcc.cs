using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/********************************************************************************/
/* Steadsoft.Spitfire v1.0.0.0                                                  */
/* Warning DO NOT MODIFY this struct by editing.                                */
/* This code was generated by a software tool.                                  */
/********************************************************************************/

namespace Steadsoft.Spitfire.STM32MP153.Peripherals
{
    public partial class Rcc
    {
        public ref Registers.MP_APB1ENSETR MP_APB1ENSETR => ref GetAsRegister<Registers.MP_APB1ENSETR>(0x0A00);
        public ref Registers.MP_AHB4ENSETR MP_AHB4ENSETR => ref GetAsRegister<Registers.MP_AHB4ENSETR>(0x0A27);

        public static class Registers
        {
            public struct MP_APB1ENSETR : IRegister
            {
                private uint allBits;

                private MP_APB1ENSETR(uint Initial)
                {
                    allBits = Initial;
                }

                public uint AllBits { get => allBits; set => allBits = value; }

                public bool this[int B]
                {
                    get => GetAsBitVector32(ref allBits)[BitSupport.VectorOf1Bit[CheckMax(B, 31)]];
                    set => GetAsBitVector32(ref allBits)[BitSupport.VectorOf1Bit[CheckMax(B, 31)]] = value;
                }
                public bool TIM2EN
                {
                    get => Convert.ToBoolean ((this  & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFFFFEU) | ((Convert.ToUInt32(value) & 0x00000001U));
                }

                public bool TIM3EN
                {
                    get => Convert.ToBoolean ((this  >> 1 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFFFFDU) | ((Convert.ToUInt32(value) & 0x00000001U) << 1);
                }

                public bool TIM4EN
                {
                    get => Convert.ToBoolean ((this  >> 2 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFFFFBU) | ((Convert.ToUInt32(value) & 0x00000001U) << 2);
                }

                public bool TIM5EN
                {
                    get => Convert.ToBoolean ((this  >> 3 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFFFF7U) | ((Convert.ToUInt32(value) & 0x00000001U) << 3);
                }

                public bool TIM6EN
                {
                    get => Convert.ToBoolean ((this  >> 4 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFFFEFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 4);
                }

                public bool TIM7EN
                {
                    get => Convert.ToBoolean ((this  >> 5 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFFFDFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 5);
                }

                public bool TIM12EN
                {
                    get => Convert.ToBoolean ((this  >> 6 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFFFBFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 6);
                }

                public bool TIM13EN
                {
                    get => Convert.ToBoolean ((this  >> 7 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFFF7FU) | ((Convert.ToUInt32(value) & 0x00000001U) << 7);
                }

                public bool TIM14EN
                {
                    get => Convert.ToBoolean ((this  >> 8 & 0x00000001U)) ;
                    set => AllBits = (this & 0xFFFFFEFFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 8);
                }

                public bool DAC12EN
                {
                    get => Convert.ToBoolean ((this  >> 29 & 0x00000001U)) ;
                    set => AllBits = (this & 0xDFFFFFFFU) | ((Convert.ToUInt32(value) & 0x00000001U) << 29);
                }


                public static implicit operator uint (MP_APB1ENSETR R) => R.allBits;
                public static implicit operator MP_APB1ENSETR(uint R) => new MP_APB1ENSETR(R);
            }

            public struct MP_AHB4ENSETR : IRegister
            {
                private uint allBits;

                private MP_AHB4ENSETR(uint Initial)
                {
                    allBits = Initial;
                }

                public uint AllBits { get => allBits & 0x000007FFU; set => allBits = value & 0x000007FFU; }

                public bool this[GpioPort B]
                {
                    get => GetAsBitVector32(ref allBits)[BitSupport.VectorOf1Bit[CheckMax(Convert.ToInt32(B), 10)]];
                    set => GetAsBitVector32(ref allBits)[BitSupport.VectorOf1Bit[CheckMax(Convert.ToInt32(B), 10)]] = value;
                }

                public static implicit operator uint (MP_AHB4ENSETR R) => R.allBits;
                public static implicit operator MP_AHB4ENSETR(uint R) => new MP_AHB4ENSETR(R);
            }

            }
    }
}
